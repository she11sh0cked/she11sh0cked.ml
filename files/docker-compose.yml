version: "3.9"

########################### NETWORKS

networks:
  default:
    driver: bridge
  reverse_proxy:
    name: reverse_proxy
    driver: bridge

########################### SECRETS

secrets:
  traefik_forward_auth:
    file: $SECRETS_DIR/traefik_forward_auth
  wg_private_key:
    file: $SECRETS_DIR/wg_private_key

########################### EXTENSION FIELDS

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  environment:
    <<: *default-tz-puid-pgid
  networks:
    - reverse_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  <<: *common-keys-core
  restart: unless-stopped

########################### SERVICES
services:
  ############################# FRONTENDS

  # Traefik - Reverse Proxy
  traefik:
    <<: *common-keys-core
    container_name: traefik
    image: traefik:latest
    command:
      - --api=true
      - --api.insecure=true

      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC

      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.file.directory=/rules
      - --providers.file.watch=true

      - --serversTransport.insecureSkipVerify=true

      - --entryPoints.http.address=:80

      - --entryPoints.https.address=:443
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.domains[0].main=$DOMAIN
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAIN
      - --entrypoints.https.http.tls.options=tls-opts@file

      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $APPDATA_DIR/traefik/rules:/rules
      - $APPDATA_DIR/traefik/acme.json:/acme.json
    environment:
      <<: *default-tz-puid-pgid
      DOMAIN: $DOMAIN
      CF_API_EMAIL: $CLOUDFLARE_EMAIL
      CF_API_KEY: $CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAIN`)"
      - "traefik.http.routers.traefik-rtr.tls=true" # Some people had 404s without this
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAIN"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAIN"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.traefik-rtr.service=api@internal"

  # Google OAuth - Single Sign On using OAuth 2.0
  oauth:
    <<: *common-keys-core
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    environment:
      <<: *default-tz-puid-pgid
      CONFIG: /config
      COOKIE_DOMAIN: $DOMAIN
      INSECURE_COOKIE: "false"
      AUTH_HOST: oauth.$DOMAIN
      URL_PATH: /_oauth
      LOG_FORMAT: text
      LIFETIME: 86400 # 1 day
      DEFAULT_ACTION: auth
      DEFAULT_PROVIDER: google
    secrets:
      - source: traefik_forward_auth
        target: /config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer-ce:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $APPDATA_DIR/portainer:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Heimdall - Application Dashboard
  heimdall:
    <<: *common-keys-core
    image: ghcr.io/linuxserver/heimdall:latest
    container_name: heimdall
    volumes:
      - $APPDATA_DIR/heimdall:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
      - "traefik.http.routers.heimdall-rtr.rule=Host(`$DOMAIN`,`www.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.heimdall-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  # Gluetun - VPN Client for Docker Containers and More
  gluetun:
    <<: *common-keys-core
    image: qmcgaw/gluetun
    container_name: gluetun
    entrypoint: [
        "/bin/sh",
        "-c",
        # Load the WireGuard private key from a Docker secret
        "export WIREGUARD_PRIVATE_KEY=$(cat /run/secrets/wg_private_key) ; /gluetun-entrypoint",
      ]
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    networks:
      - reverse_proxy
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - $APPDATA_DIR/gluetun:/gluetun
    environment:
      TZ: $TZ
      VPN_SERVICE_PROVIDER: mullvad
      VPN_TYPE: wireguard
      WIREGUARD_ADDRESSES: 10.69.185.186/32
      SERVER_COUNTRIES: France
      SERVER_CITIES: Paris,Marseille
    secrets:
      - wg_private_key
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.gluetun-qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.gluetun-qbittorrent-rtr.rule=Host(`qbit.$DOMAIN`)"
      # Middlewares
      - "traefik.http.routers.gluetun-qbittorrent-rtr.middlewares=protected@file"
      # HTTP Services
      - "traefik.http.routers.gluetun-qbittorrent-rtr.service=gluetun-svc"
      - "traefik.http.services.gluetun-svc.loadbalancer.server.port=8080"

  ############################# DOWNLOADERS

  # qBittorrent - Torrent downloader
  # Traefik labels via gluetun
  qbittorrent:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    networks: []
    network_mode: "service:gluetun"
    volumes:
      - $APPDATA_DIR/qbittorrent:/config
      - $DOWNLOADS_DIR:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 002

  # Flood - A modern web UI for various torrent clients
  flood:
    <<: *common-keys-apps
    image: jesec/flood:master
    container_name: flood
    volumes:
      - $APPDATA_DIR/flood:/config
      - $DOWNLOADS_DIR:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
      FLOOD_OPTION_AUTH: none
      FLOOD_OPTION_QBURL: http://gluetun:8080
      FLOOD_OPTION_QBUSER: admin
      FLOOD_OPTION_QBPASS: adminadmin
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.flood-rtr.entrypoints=https"
      - "traefik.http.routers.flood-rtr.rule=Host(`flood.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.flood-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.flood-rtr.service=flood-svc"
      - "traefik.http.services.flood-svc.loadbalancer.server.port=3000"

  # Unpackerr - Automated Unpacking
  unpackerr:
    <<: *common-keys-apps
    image: golift/unpackerr:latest
    container_name: unpackerr
    volumes:
      - $DOWNLOADS_DIR/complete:/data/downloads/complete
    environment:
      <<: *default-tz-puid-pgid
      UN_RADARR_0_API_KEY: $RADARR_API_KEY
      UN_RADARR_0_PATHS_0: /data/downloads/complete
      UN_RADARR_0_URL: http://radarr:7878
      UN_SONARR_0_API_KEY: $SONARR_API_KEY
      UN_SONARR_0_PATHS_0: /data/downloads/complete
      UN_SONARR_0_URL: http://sonarr:8989
      UN_WEBHOOK_0_URL: $UNPACKERR_NOTIFICATION_URL

  ############################# INDEXERS

  # Prowlarr - Torrent proxy
  prowlarr:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $APPDATA_DIR/prowlarr:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  ############################# PVRS

  # Radarr - Movie management
  radarr:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/radarr:nightly
    container_name: radarr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $APPDATA_DIR/radarr:/config
      - $DOWNLOADS_DIR/complete:/data/downloads/complete
      - $MEDIA_DIR/movies:/data/media/movies
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  sonarr:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/sonarr:develop
    container_name: sonarr
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $APPDATA_DIR/sonarr:/config
      - $DOWNLOADS_DIR/complete:/data/downloads/complete
      - $MEDIA_DIR/shows:/data/media/shows
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"

  ############################# MEDIA

  # Jellyfin - Media Server
  jellyfin:
    <<: *common-keys-apps
    image: ghcr.io/endrl/jellyfin:latest
    container_name: jellyfin
    volumes:
      - /dev/shm:/data/transcode
      - $APPDATA_DIR/jellyfin:/config
      - $MEDIA_DIR:/data/media
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyfin-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-rtr.rule=Host(`jellyfin.$DOMAIN`,`jf.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.jellyfin-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.jellyfin-rtr.service=jellyfin-svc"
      - "traefik.http.services.jellyfin-svc.loadbalancer.server.port=8096"

  # Jellyfin Vue - Alternative Jellyfin WebUI
  jellyfin-vue:
    <<: *common-keys-apps
    image: ghcr.io/endrl/jellyfin-vue:latest
    container_name: jellyfin-vue
    depends_on:
      - jellyfin
    environment:
      <<: *default-tz-puid-pgid
      DEFAULT_SERVERS: https://jf.$DOMAIN
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyfin-vue-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-vue-rtr.rule=Host(`jellyfin-vue.$DOMAIN`,`jfv.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.jellyfin-vue-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.jellyfin-vue-rtr.service=jellyfin-vue-svc"
      - "traefik.http.services.jellyfin-vue-svc.loadbalancer.server.port=80"

  # Jellyfin Segment Editor - Segment Editor for Jellyfin
  jellyfin-segment-editor:
    <<: *common-keys-apps
    image: ghcr.io/endrl/jellyfin-se:latest
    container_name: jellyfin-segment-editor
    depends_on:
      - jellyfin
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyfin-segment-editor-rtr.entrypoints=https"
      - "traefik.http.routers.jellyfin-segment-editor-rtr.rule=Host(`jellyfin-segment-editor.$DOMAIN`,`jfse.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.jellyfin-segment-editor-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.jellyfin-segment-editor-rtr.service=jellyfin-segment-editor-svc"
      - "traefik.http.services.jellyfin-segment-editor-svc.loadbalancer.server.port=80"

  # Jellyfin Accounts - Jellyfin Account Management
  jellyfin-accounts:
    <<: *common-keys-apps
    image: hrfee/jfa-go:latest
    container_name: jellyfin-accounts
    depends_on:
      - jellyfin
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $APPDATA_DIR/jfa-go:/data
      - $APPDATA_DIR/jellyfin:/jf
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jfa-go-rtr.entrypoints=https"
      - "traefik.http.routers.jfa-go-rtr.rule=Host(`jellyfin-accounts.$DOMAIN`,`jfa.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.jfa-go-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.jfa-go-rtr.service=jfa-go-svc"
      - "traefik.http.services.jfa-go-svc.loadbalancer.server.port=8056"

  # Jellyseerr - Media Request Management
  jellyseerr:
    <<: *common-keys-apps
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    depends_on:
      - jellyfin
    volumes:
      - $APPDATA_DIR/jellyseerr:/app/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jellyseerr-rtr.entrypoints=https"
      - "traefik.http.routers.jellyseerr-rtr.rule=Host(`jellyseerr.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.jellyseerr-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.jellyseerr-rtr.service=jellyseerr-svc"
      - "traefik.http.services.jellyseerr-svc.loadbalancer.server.port=5055"

  ############################# MEDIA FILE MANAGEMENT

  # Bazarr - Subtitle Management
  bazarr:
    <<: *common-keys-apps
    image: ghcr.io/linuxserver/bazarr:development
    container_name: bazarr
    volumes:
      - $APPDATA_DIR/bazarr:/config
      - $MEDIA_DIR:/data/media
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

  ############################# UTILITIES

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=protected@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

    # File Browser - Explorer
  filebrowser:
    <<: *common-keys-apps
    image: filebrowser/filebrowser:s6
    container_name: filebrowser
    volumes:
      - $APPDATA_DIR/filebrowser/config:/config
      - $APPDATA_DIR/filebrowser/database:/database
      - $USER_DIR:/srv
      - $DOWNLOADS_DIR:/srv/downloads
      - $MEDIA_DIR:/srv/media
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.filebrowser-rtr.entrypoints=https"
      - "traefik.http.routers.filebrowser-rtr.rule=Host(`files.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.filebrowser-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.filebrowser-rtr.service=filebrowser-svc"
      - "traefik.http.services.filebrowser-svc.loadbalancer.server.port=80"

  # Neko - Web-based Browser
  neko:
    <<: *common-keys-apps
    image: "m1k1o/neko:latest"
    container_name: neko
    ports:
      - "52000-52100:52000-52100/udp" # TODO: treafik labels
    environment:
      <<: *default-tz-puid-pgid
      NEKO_PASSWORD_ADMIN: $NEKO_PASSWORD
      NEKO_EPR: 52000-52100
      NEKO_ICELITE: 1
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.neko-rtr.entrypoints=https"
      - "traefik.http.routers.neko-rtr.rule=Host(`neko.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.neko-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.neko-rtr.service=neko-svc"
      - "traefik.http.services.neko-svc.loadbalancer.server.port=8080"

  # lastfm-playlists - Last.fm Playlist Generator for Spotify
  lastfm-playlists:
    <<: *common-keys-apps
    image: ghcr.io/she11sh0cked/lastfm-playlists:main
    container_name: lastfm-playlists
    environment:
      <<: *default-tz-puid-pgid
      LASTFM_USERNAMES: "she11sh0cked"
      LASTFM_PLAYLISTS: "library,mix,recommended"
      AMOUNT: 100
      CRON: "0 1 * * *"
      IMMEDIATE: "true"
      SPOTIFY_CLIENT_ID: $SPOTIFY_CLIENT_ID
      SPOTIFY_CLIENT_SECRET: $SPOTIFY_CLIENT_SECRET
      SPOTIFY_REDIRECT_URI: "https://lastfm-playlists.$DOMAIN/callback"
    volumes:
      - $APPDATA_DIR/lastfm-playlists:/config
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.lastfm-playlists-rtr.entrypoints=https"
      - "traefik.http.routers.lastfm-playlists-rtr.rule=Host(`lastfm-playlists.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.lastfm-playlists-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.lastfm-playlists-rtr.service=lastfm-playlists-svc"
      - "traefik.http.services.lastfm-playlists-svc.loadbalancer.server.port=3000"

  ############################# GAMES

  # Core Keeper - Game Server
  core-keeper:
    <<: *common-keys-apps
    image: escaping/core-keeper-dedicated
    container_name: core-keeper
    volumes:
      - $APPDATA_DIR/core-keeper/server-files:/home/steam/core-keeper-dedicated
      - $APPDATA_DIR/core-keeper/server-data:/home/steam/core-keeper-data
      - /tmp/.X11-unix:/tmp/.X11-unix
    environment:
      # Which world index to use.
      WORLD_INDEX: 0
      # The name to use for the server.
      WORLD_NAME: "Core Keeper"
      # The seed to use for a new world. Set to 0 to generate random seed.
      WORLD_SEED: 0
      # Game ID to use for the server. Need to be at least 23 characters and alphanumeric, excluding Y,y,x,0,O. Empty or not valid means a new ID will be generated at start.
      GAME_ID: $CORE_KEEPER_GAME_ID
      # Save file location. If not set it defaults to a sub-folder named "DedicatedServer" at the default Core Keeper save location.
      # DATA_PATH:
      # Maximum number of players that will be allowed to connect to server.
      # MAX_PLAYERS:
      # Enables discord webhook features witch sends GameID to a channel.
      # DISCORD:
      # Webhook url (Edit channel > Integrations > Create Webhook).
      # DISCORD_HOOK:
      # Enables Seasonal Events. 0 is default, 1 is Easter, 2 is Halloween, 3 is Christmas.
      SEASON: 0
    stop_grace_period: 2m

  ############################# MAINTENANCE

  # Notifiarr - Notification Management
  notifiarr:
    <<: *common-keys-apps
    image: golift/notifiarr:latest
    container_name: notifiarr
    volumes:
      - $APPDATA_DIR/notifiarr:/config
      - /var/run/utmp:/var/run/utmp
      - /etc/machine-id:/etc/machine-id
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.notifiarr-rtr.entrypoints=https"
      - "traefik.http.routers.notifiarr-rtr.rule=Host(`notifiarr.$DOMAIN`)"
      ## Middlewares
      - "traefik.http.routers.notifiarr-rtr.middlewares=public@file"
      ## HTTP Services
      - "traefik.http.routers.notifiarr-rtr.service=notifiarr-svc"
      - "traefik.http.services.notifiarr-svc.loadbalancer.server.port=5454"

  # Watchtower - Automatic Docker Container Updates
  watchtower:
    <<: *common-keys-apps
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      <<: *default-tz-puid-pgid
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_NOTIFICATION_REPORT: "true"
      WATCHTOWER_NOTIFICATION_URL: $WATCHTOWER_NOTIFICATION_URL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
